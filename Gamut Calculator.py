# -*- coding: utf-8 -*-
"""[INF1761][T1]Daniel Faller e Eduardo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BS4HZw6rZXAzi9FReew4Dmyv-BfhgXSQ

### Importando pacotes e funções
"""

# Commented out IPython magic to ensure Python compatibility.
# Importar e manipular dados
import pandas as pd 

# Manipular dados
import numpy as np

# Ferramentas de visualizacao de dados
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import matplotlib.pyplot as plt
# %matplotlib inline

def gamma_sRGB(x):
	#ft,t
  if (x>0):
    ft = x
    t = x
  else:
    ft = -x
    t = -x
  if (t>0.0031308):
    ft = 1.055*pow(t,1.0/2.4)-0.055;
  else:                  
		ft = 12.92*t;
  if( x > 0):
    return ft
  else:
    return -ft

def corCIEXYZtosRGB(X, Y, Z):
  clamp = False
  r = 3.2404542*X - 1.5371385*Y - 0.4985314*Z;
  g =-0.9692660*X + 1.8760108*Y + 0.0415560*Z;
  b = 0.0556434*X - 0.2040259*Y + 1.0572252*Z;
 
  r = gamma_sRGB(r);
  g = gamma_sRGB(g);
  b = gamma_sRGB(b);

  pR = r;
  pG = g;
  pB = b;

  if(clamp):
    if( pR < 0):
      pR = 0
    if( pR > 1):
      pR = 1
    if( pG < 0):
      pG = 0
    if( pG > 1):
      pG = 1
    if( pB < 0):
      pB = 0
    if( pB > 1):
      pB = 1
  return [pR,pG,pB]

def corCIEXYZtoxyY(X,Y,Z):
    sum = X+Y+Z
    x = (X/sum)
    y = (Y/sum)
    return [x,y]

def gamma_Lab(t):
  ft = 0
  e=216.0/24389
  k= 24389.0/27
  if (t>e):
    ft=pow(t,1.0/3); 
  else:
    ft=(k*t+16)/116;
  return ft;

def corCIEXYZtoLab(X,Y,Z,light):
  xr = X/light
  yr = Y/light
  zr = Z/light

  fx = gamma_Lab(xr)
  fy = gamma_Lab(yr)
  fz = gamma_Lab(zr)

  L = (116*fy-16)
  a = (500*(fx-fy))
  b = (200*(fy-fz))

  return [L,a,b]

def generateBeta(delta):
  beta = []
  for i in range(0,401):
    if(delta > 0):
      beta.append(1)
    else:
      beta.append(0)
    delta -= 1
    

  return beta

"""### Abrindo arquivo .xls e importando os dados"""

from google.colab import files
uploaded = files.upload()
data = pd.read_excel("all_1nm_data.xls", header=0, skiprows=3)

data

"""### Manipulando os dados"""

import math as math

xyz  = []
srgb = []
lab  = []

d65_i  = np.array(data['CIE D65'].tolist()[80:481])
ybar_i = np.array(data['y bar'].tolist()[80:481])
xbar_i = np.array(data['x bar'].tolist()[80:481])
zbar_i = np.array(data['z bar'].tolist()[80:481])

k =  1/np.sum(d65_i * ybar_i )
d65_i = d65_i * k

for delta in range(1,401,5):
  beta = generateBeta(delta)  
  
  for i in range(1,401,5):
    beta =  np.roll(beta,10)
    x = np.sum(xbar_i * beta * d65_i)
    y = np.sum(ybar_i * beta * d65_i)
    z = np.sum(zbar_i * beta * d65_i)
    xyz.append([x,y,z])
    srgb.append(corCIEXYZtosRGB(x,y,z))
    lab.append(corCIEXYZtoLab(x,y,z,np.sum(d65_i)))
  beta = generateBeta(delta)
  for i in range(1,401,5):
    beta =  np.roll(beta,10)
    x = np.sum(xbar_i * beta * d65_i)
    y = np.sum(ybar_i * beta * d65_i)
    z = np.sum(zbar_i * beta * d65_i)
    xyz.append([x,y,z])
    srgb.append(corCIEXYZtosRGB(x,y,z))
    lab.append(corCIEXYZtoLab(x,y,z,np.sum(d65_i)))

xyz = np.array(xyz)
srgb = np.array(srgb)
lab = np.array(lab)

"""### Plotando gráficos"""

def corCIEXYZtoCIERGB(X,Y,Z):
    R = 2.2372*X-0.902*Y-0.4701 *Z
    G =-0.5272*X+1.4352*Y+0.0920*Z
    B = 0.053*X-0.01415*Y+1.009*Z
    if(R < 0):
      R = 0
    if(R > 1):
      R = 1
    if(G < 0):
      G = 0
    if( G > 1):
      G = 1
    if(B < 0):
      B = 0
    if(B > 1):
      B = 1
    return [R,G,B]

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

ax.set_xlim3d((0, 1))
ax.set_ylim3d((0, 1))
ax.set_zlim3d((0, 1))



for i in xyz:
  color = corCIEXYZtoCIERGB(i[0],i[1],i[2])
  ax.scatter(i[0], i[1], i[2],c = color, marker = ',')
    
plt.show()

fig = plt.figure()

ax = fig.add_subplot(1,1,1, projection='3d')

ax.set_xlabel('R Label')
ax.set_ylabel('G Label')
ax.set_zlabel('B Label')

count = 0
for i in srgb:
  color = corCIEXYZtoCIERGB(xyz[count][0],xyz[count][1],xyz[count][2])
  ax.scatter(i[0], i[1], i[2],c = color, marker = ',')
  count+= 1
plt.show()

fig = plt.figure()
ax = fig.add_subplot(1,1,1, projection='3d')

ax.set_zlabel('L Label')
ax.set_xlabel('A Label')
ax.set_ylabel('B Label')
ax.set_xlim3d((-100, 100))
ax.set_ylim3d((-100, 100))
ax.set_zlim3d((-100, 100))

count = 0
for i in lab:
  color = corCIEXYZtoCIERGB(xyz[count][0],xyz[count][1],xyz[count][2])
  ax.scatter(i[1], i[2],i[0],c = color, marker = ',')
  count+= 1
plt.show()